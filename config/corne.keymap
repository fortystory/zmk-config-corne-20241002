/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    quick-tap-ms = <180>;
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
};

/ {
    combos {
        compatible = "zmk,combos";

        right_bul {
            bindings = <&tog 5>;
            key-positions = <33 34 35>;
        };

        left_bul {
            bindings = <&tog 5>;
            key-positions = <24 25 26>;
        };

        f17 {
            bindings = <&kp F17>;
            key-positions = <37 40>;
            layers = <0>;
        };

        play {
            bindings = <&tog 6>;
            key-positions = <23 22 13 12>;
        };

        se {
            bindings = <&e_s_key>;
            key-positions = <14 3>;
        };

        li {
            bindings = <&l_i_key>;
            key-positions = <21 8>;
        };

        left_parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <28 27>;
        };

        right_parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <31 32>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <27 26>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <32 33>;
        };

        left_brace_big {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <25 26>;
        };

        right_brace_big {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <34 33>;
        };
    };

    macros {
        e_s_key: e_s_key {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp S>;
            label = "e_s_key";
            wait-ms = <75>;
        };

        l_i_key: l_i_key {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp L &kp I>;
            label = "L_I_KEY";
            wait-ms = <75>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp GRAVE  &kp Q           &kp W           &kp E        &kp R         &kp T        &kp Y         &kp U         &kp I        &kp O       &kp P          &kp BSPC
&kp ESC    &mt LEFT_WIN A  &mt LEFT_ALT S  &mt LCTRL D  &mt LSHIFT F  &kp G        &kp H         &mt RSHIFT J  &mt RCTRL K  &mt RALT L  &mt RWIN SEMI  &kp SQT
&kp LSHFT  &kp Z           &kp X           &kp C        &kp V         &kp B        &kp N         &kp M         &kp COMMA    &kp DOT     &kp FSLH       &key_repeat
                                           &mo 3        &kp SPACE     &lt 1 TAB    &lt 2 RETURN  &kp SPACE     &mo 4
            >;

            label = "Corne";
        };

        arrow_media_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &none     &none         &none      &none         &none    &none       &none       &none         &none      &none              &kp BSPC
&kp ESC    &kp LGUI  &kp LALT      &kp LCTRL  &kp LSHFT     &none    &kp LEFT    &kp DOWN    &kp UP_ARROW  &kp RIGHT  &mt HOME PAGE_UP   &kp ENTER
&kp LSHFT  &none     &kp C_VOL_DN  &none      &kp C_VOL_UP  &none    &kp C_MUTE  &kp C_PREV  &kp C_NEXT    &kp C_PP   &mt END PAGE_DOWN  &kp DEL
                                   &kp LCTRL  &kp SPACE     &none    &kp ENTER   &kp SPACE   &kp LGUI
            >;

            label = "HJKL_media";
        };

        symbols_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp CARET      &kp AMPERSAND    &kp AT          &kp HASH                &kp DLLR                &kp PRCNT         &none   &none      &none      &none     &none     &kp BSPC
&kp TILDE      &kp EXCLAMATION  &kp ASTERISK    &mt GREATER_THAN MINUS  &mt GREATER_THAN EQUAL  &kp UNDERSCORE    &none   &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &kp ENTER
&kp BACKSLASH  &kp LESS_THAN    &kp LEFT_BRACE  &kp LEFT_PARENTHESIS    &kp LEFT_BRACKET        &kp PIPE          &none   &none      &none      &none     &none     &kp DEL
                                                &kp PIPE                &kp SPACE               &kp UNDERSCORE    &trans  &none      &none
            >;

            label = "!@#$";
        };

        number_layer {
            bindings = <
&kp TAB       &kp LC(Q)  &kp LC(W)  &kp LC(E)  &kp LC(R)  &kp LC(T)    &kp ASTERISK     &kp N7     &kp N8         &kp N9  &kp EQUAL  &kp BSPC
&kp ESC       &kp LC(A)  &kp LC(S)  &kp LC(D)  &kp LC(F)  &kp LC(G)    &kp MINUS        &kp N4     &kp N5         &kp N6  &kp N0     &kp ENTER
&kp LEFT_WIN  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(B)    &kp PLUS         &kp N1     &kp N2         &kp N3  &kp SLASH  &kp DOT
                                    &none      &none      &none        &kp RIGHT_SHIFT  &kp RCTRL  &kp RIGHT_ALT
            >;

            label = "12345";
        };

        Fn_layer {
            bindings = <
&none  &kp F12  &kp F11  &kp F10  &kp F9     &none    &none   &none      &none      &none     &none     &kp BSPC
&none  &kp F4   &kp F3   &kp F2   &kp F1     &none    &none   &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &kp ENTER
&none  &kp F8   &kp F7   &kp F6   &kp F5     &none    &none   &none      &none      &none     &none     &kp DEL
                         &kp TAB  &kp SPACE  &none    &trans  &none      &none
            >;

            label = "Fn";
        };

        both_layer {
            bindings = <
&bt BT_CLR  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
&none       &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &none
&sys_reset  &none         &none         &none         &none         &bootloader     &bootloader   &none         &none         &none         &none         &sys_reset
                                        &none         &none         &none           &none         &none         &none
            >;

            label = "Bulebooth";
        };

        potplayer_layer {
            bindings = <
&kp ESC    &kp N1  &kp N2  &kp N3   &kp N4     &kp N5       &kp P      &none            &none              &none     &kp P           &kp BSPC
&kp LEFT   &kp A   &kp S   &kp D    &kp F      &kp ENTER    &kp H      &kp LS(PAGE_UP)  &kp LS(PAGE_DOWN)  &none     &kp UP_ARROW    &none
&kp RIGHT  &kp Z   &kp X   &kp C    &kp V      &kp B        &none      &none            &none              &kp LEFT  &kp DOWN_ARROW  &kp RIGHT
                           &kp ESC  &kp SPACE  &kp ENTER    &kp ENTER  &kp SPACE        &kp ESC
            >;

            label = "potplayer";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
