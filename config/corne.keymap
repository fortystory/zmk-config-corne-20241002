/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    quick-tap-ms = <250>;
    flavor = "tap-unless-interrupted";
    tapping-term-ms = <150>;
    retro-tap;
};

/ {
    combos {
        compatible = "zmk,combos";

        right_bul {
            bindings = <&tog 8>;
            key-positions = <33 34 35>;
        };

        left_bul {
            bindings = <&tog 8>;
            key-positions = <24 25 26>;
        };

        f17 {
            bindings = <&kp LG(SPACE)>;
            key-positions = <37 40>;
            layers = <0>;
        };

        combo_f8 {
            bindings = <&kp F8>;
            key-positions = <38 39>;
        };

        combo_colon {
            bindings = <&kp COLON>;
            key-positions = <16 22>;
            timeout-ms = <60>;
            require-prior-idle-ms = <30>;
            layers = <0>;
        };

        combo_left_bracket_quotation {
            bindings = <&left_bracket_and_quotation>;
            key-positions = <14 16>;
        };

        combo_quotation_right_bracket {
            bindings = <&quotation_and_right_bracket>;
            key-positions = <19 21>;
        };

        combo_arraw {
            bindings = <&arraw>;
            key-positions = <15 16>;
            layers = <2>;
        };

        combo_arraw_eq {
            bindings = <&arraw_eq>;
            key-positions = <3 4>;
            layers = <2>;
        };

        combo_dollar_combo {
            bindings = <&kp DOLLAR>;
            key-positions = <31 4>;
        };

        combo_ctrl_f19 {
            bindings = <&kp LC(F19)>;
            key-positions = <16 17>;
        };

        combo_ctrl_f20 {
            bindings = <&kp LC(F20)>;
            key-positions = <4 5>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <32 15>;
        };

        combo_equal {
            bindings = <&kp EQUAL>;
            key-positions = <32 16>;
        };

        combo_delete {
            bindings = <&kp DELETE>;
            key-positions = <34 35>;
            layers = <0>;
        };

        combo_potplayer {
            bindings = <&tog 7>;
            key-positions = <36 37 38 40 39 41>;
            layers = <0 7>;
        };
    };

    macros {
        macro_e_s: e_s_key {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp S>;
            label = "e_s_key";
            wait-ms = <75>;
        };

        macro_l_i: l_i_key {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp L &kp I>;
            label = "L_I_KEY";
            wait-ms = <75>;
        };

        left_bracket_and_quotation: left_bracket_and_quotation {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp SQT>;
            label = "LEFT_BRACKET_AND_QUOTATION";
        };

        quotation_and_right_bracket: quotation_and_right_bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp RBKT>;
            label = "QUOTATION_AND_RIGHT_BRACKET";
        };

        arraw: arraw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GREATER_THAN>;
            label = "ARRAW";
        };

        arraw_eq: arraw_eq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GREATER_THAN>;
            label = "ARRAW_EQ";
        };
    };

    behaviors {
        l_s_behavior: l_s_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "L_S_BEHAVIOR";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
        };

        win_behavior: win_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "WIN_BEHAVIOR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-unless-interrupted";
            retro-tap;
            quick-tap-ms = <250>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp GRAVE  &kp Q           &kp W           &kp E                 &kp R         &kp T        &kp Y      &kp U         &kp I                  &kp O                &kp P          &kp BSPC
&kp ESC    &mt LEFT_WIN A  &mt LEFT_ALT S  &mt LCTRL D           &mt LSHIFT F  &lt 6 G      &kp H      &mt RSHIFT J  &mt RCTRL K            &mt RALT L           &mt RWIN SEMI  &kp SQT
&kp LSHFT  &kp Z           &lt 4 X         &lt 3 C               &lt 1 V       &kp B        &kp N      &kp M         &l_s_behavior 2 COMMA  &l_s_behavior 5 DOT  &kp FSLH       &kp MINUS
                                           &mt LCTRL UNDERSCORE  &kp SPACE     &lt 6 TAB    &kp ENTER  &kp SPACE     &key_repeat
            >;

            label = "Corne";
        };

        arrow_media_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &none     &none     &none      &none      &none    &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &none              &kp BSPC
&kp ESC    &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none    &kp LEFT        &kp DOWN        &kp UP_ARROW  &kp RIGHT        &mt HOME PAGE_UP   &kp C_VOL_UP
&kp LSHFT  &none     &none     &none      &none      &none    &kp C_MUTE      &kp C_PREV      &kp C_NEXT    &kp C_PP         &mt END PAGE_DOWN  &kp C_VOL_DN
                               &kp LCTRL  &kp SPACE  &none    &kp ENTER       &kp SPACE       &kp LGUI
            >;

            label = "HJKL_media";
        };

        symbols_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE       &kp AMPERSAND    &kp AT         &kp HASH   &kp DLLR        &kp PRCNT         &none     &none      &none      &none     &none     &kp BSPC
&kp ESCAPE      &kp EXCLAMATION  &kp ASTERISK   &kp MINUS  &kp EQUAL       &kp TILDE         &none     &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &kp ENTER
&kp LEFT_SHIFT  &kp CARET        &kp BACKSLASH  &kp PIPE   &kp FSLH        &kp UNDERSCORE    &none     &none      &none      &none     &none     &kp DEL
                                                &kp LCTRL  &kp LEFT_SHIFT  &kp LEFT_ALT      &kp RALT  &kp RSHFT  &kp RCTRL
            >;

            label = "!@#$";
        };

        brackets {
            bindings = <
&none  &none  &none  &none      &none      &none       &kp LEFT_BRACE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE   &kp PIPE  &kp BSPC
&none  &none  &none  &none      &none      &none       &kp LESS_THAN   &kp LBKT              &kp RBKT               &kp GREATER_THAN  &kp SEMI  &kp APOS
&none  &none  &none  &none      &none      &none       &kp BACKSLASH   &kp EQUAL             &kp COMMA              &kp DOT           &kp FSLH  &kp DEL
                     &kp LCTRL  &kp LSHFT  &kp LALT    &kp ENTER       &kp SPACE             &kp LCTRL
            >;

            label = "<[({})]>";
        };

        number_layer {
            bindings = <
&kp GRAVE   &none     &none     &none      &none      &none       &kp ASTERISK     &kp N7  &kp N8   &kp N9  &kp EQUAL  &kp BSPC
&kp ESC     &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none       &kp MINUS        &kp N4  &kp N5   &kp N6  &kp DOT    &kp ENTER
&kp LSHIFT  &none     &none     &none      &none      &none       &kp PLUS         &kp N1  &kp N2   &kp N3  &kp SLASH  &kp PERCENT
                                &kp LCTRL  &kp LSHFT  &kp LALT    &kp RIGHT_SHIFT  &kp N0  &kp DOT
            >;

            label = "12345";
        };

        Fn_layer {
            bindings = <
&none  &kp F12  &kp F11  &kp F10    &kp F9     &none       &none     &none      &none      &none     &none     &kp BSPC
&none  &kp F4   &kp F3   &kp F2     &kp F1     &none       &none     &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &kp ENTER
&none  &kp F8   &kp F7   &kp F6     &kp F5     &none       &none     &none      &none      &none     &none     &kp DEL
                         &kp LCTRL  &kp LSHFT  &kp LALT    &kp LALT  &kp LSHFT  &kp LCTRL
            >;

            label = "Fn";
        };

        mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &mkp MB4   &none           &mmv MOVE_UP    &none            &msc SCRL_UP    &kp HOME
&trans  &trans  &trans  &trans  &trans  &trans    &none      &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN  &kp END
&trans  &trans  &trans  &trans  &trans  &trans    &mkp MB5   &msc SCRL_LEFT  &trans          &msc SCRL_RIGHT  &trans          &trans
                        &trans  &trans  &trans    &mkp LCLK  &mkp RCLK       &mkp MCLK
            >;

            label = "mouse";
        };

        potplayer_layer {
            bindings = <
&kp ESC    &kp N1  &kp N2  &kp N3   &kp N4     &kp N5       &kp P      &none            &none              &none     &kp P           &kp BSPC
&kp LEFT   &kp A   &kp S   &kp D    &kp F      &kp ENTER    &kp H      &kp LS(PAGE_UP)  &kp LS(PAGE_DOWN)  &none     &kp UP_ARROW    &none
&kp RIGHT  &kp Z   &kp X   &kp C    &kp V      &kp B        &none      &none            &none              &kp LEFT  &kp DOWN_ARROW  &kp RIGHT
                           &kp ESC  &kp SPACE  &kp ENTER    &kp ENTER  &kp SPACE        &kp ESC
            >;

            label = "potplayer";
        };

        both_layer {
            bindings = <
&bt BT_CLR  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
&none       &none         &none         &none         &bt BT_PRV    &none           &none         &bt BT_NXT    &none         &none         &none         &none
&sys_reset  &none         &none         &none         &none         &bootloader     &bootloader   &none         &none         &none         &none         &sys_reset
                                        &none         &none         &none           &none         &none         &none
            >;

            label = "Bulebooth";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
